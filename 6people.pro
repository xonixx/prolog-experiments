
:-use_module(library(clpfd)).

clp_build_or(Var, [H], Var #= H) :-!.
clp_build_or(Var, [H | T], Var #= H #\/ Oth) :-
	clp_build_or(Var, T, Oth).
	

clp_member(Var, L) :-
	clp_build_or(Var, L, Constraint),
	Constraint.

zip([],[],[]):-!.
zip([H | T], [H1 | T1], [H/H1 | T2]) :- zip(T,T1,T2).

создать_ответ([],_,_,[]):-!.
создать_ответ([L/L1 | LL],UU,PP,[L1/U/P | RR]) :-
	member(L/U,UU),
	member(L/P,PP),
	!,
	создать_ответ(LL,UU,PP,RR).
	

создать_ответ(L, L1, U, U1, P, P1, R) :-
	zip(L,L1,LL),
	zip(U,U1,UU),
	zip(P,P1,PP),
	создать_ответ(LL,UU,PP,R).

решить(Ответ) :-
	Люди = [U,_V,W,X,Y,Z], 
	Люди = [1,2,3,4,5,6],
	Увлечения = [Насекомые, Радио, Филателист, _Открытки, Авиамодели, Ждмодели],
	Профессии = [Электромонтер, Машинист, Забойщик, Токарь, Инженер, Врач],
	
	append([Увлечения, Профессии], Неизвестные),
	
	Неизвестные ins 1..6,
	
	all_different(Люди),
	all_different(Увлечения),
	all_different(Профессии),
	
	% 1)
	clp_member(U, [Авиамодели, Ждмодели]), 
	
	% 2)
	Z #\= Электромонтер,
	W #\= Электромонтер,
	W #= Радио,
	
	% 3)
	X #\= Ждмодели, X #\= Машинист,
	Y #\= Ждмодели, Y #\= Машинист,
	
	% 4)
	clp_member(Врач, [Авиамодели, Ждмодели]),
	
	% 5)
	clp_member(U,[Электромонтер, Машинист, Забойщик, Токарь]),
	
	% 6)
	X #\= Насекомые,
	Y #\= Насекомые,
	Машинист #\= Насекомые,
	
	% 7)
	clp_member(Авиамодели, [Токарь, Инженер, Врач]),
	
	% 8)
	all_different([Машинист, Y, Филателист]),
	
	% 9)
	Забойщик #\= Радио,
	Насекомые #= Электромонтер,
	
	% 10)
	Z #\= Инженер,
	
	% 11)
	clp_member(Ждмодели, [Инженер, Врач]),
       
	
	label(Неизвестные),
	
	создать_ответ(
		     Люди,['U','V','W','X','Y','Z'],
		      Увлечения, ['Насекомые', 'Радио', 'Филателист', 'Открытки', 'Авиамодели', 'Ждмодели'],
		      Профессии, ['Электромонтер', 'Машинист', 'Забойщик', 'Токарь', 'Инженер', 'Врач'],
		      Ответ
		     ).
	
